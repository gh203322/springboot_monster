package com.monster.serviceImpl.${[folderName]};

import com.github.wenhao.jpa.Specifications;
import com.monster.base.reqAndRsp.Ipage;
import com.monster.model.entity.${[folderName]}.${[entityName]};
import com.monster.model.request.${[folderName]}.${[entitySearch]};
import com.monster.repository.${[folderName]}.${[entityRepository]};
import com.monster.service.${[folderName]}.${[entityService]};
import com.monster.utils.DataUtil;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

@Service
public class ${[entityServiceImpl]} implements ${[entityService]} {

	@Autowired
    private ${[entityRepository]} repository;
    
	@Override
	public ${[entityName]} save(${[entityName]} entity) {
		
		return repository.save(entity);
	}

	@Override
	public ${[entityName]} saveOrUpdate(${[entityName]} entity) {

		return repository.saveAndFlush(entity);
	}

	@Override
	public boolean saveAll(Iterable<${[entityName]}> entities) {

		try {
			repository.saveAll(entities);
		} catch (Exception e) {
			return false;
		}
		
		return true;
	}

	@Override
	public boolean delete(${[entityName]} entity) {
        try {
        	repository.delete(entity);
		} catch (Exception e) {
			return false;
		}
		
        return true;
	}

	@Override
	public boolean deleteById(Integer id) {

		try {
			repository.deleteById(Integer.parseInt(String.valueOf(id)));
		} catch (Exception e) {
			return false;
		}
		
		return true;
	}

	@Override
	public boolean deleteBatchByEntitys(Iterable<${[entityName]}> entities) {
		
		try {
			repository.deleteInBatch(entities);
		} catch (Exception e) {
			return false;
		}
		
		return true;
	}

	@Override
	public ${[entityName]} update(${[entityName]} entity) {

		return repository.saveAndFlush(entity);
	}

	@Override
	public List<${[entityName]}> findAll() {

		return repository.findAll();
	}

	@Override
	public ${[entityName]} findById(Integer id) {

		return repository.findById(id).get();
	}

	@Override
	public List<${[entityName]}> findAllByExample(Example<${[entityName]}> example) {

		return repository.findAll(example);
	}

	@Override
	public List<${[entityName]}> findAllByExampleAndSort(Example<${[entityName]}> example, Sort sort) {

		return repository.findAll(example,sort);
	}

	@Override
	public List<Map<String, Object>> findAllToMap() {
		
		return repository.findAllToMap();
	}

	@Override
	public Page<${[entityName]}> findAllToPage(Pageable pageable) {
		
		return repository.findAll(pageable);
	}

	@Override
	public ${[entityName]} saveOrUpdateIgnoreNull(${[entityName]} entity, String...params)
	{

		return repository.saveOrUpdateIgnoreNull(entity, params);
	}

	@Override
	public Page<${[entityName]}> findAllToPage(Ipage ipage) throws Exception {
		
			if(DataUtil.isNotEmptyObj(ipage)) {
				${[entitySearch]} search = (${[entitySearch]}) ipage.getParams();
				 if(DataUtil.isNotEmptyObj(search)) {
					 Specification<${[entityName]}> specification = Specifications.<${[entityName]}>and()
					            .eq(DataUtil.isNotEmptyObj(search.getId()), "id", search.getId())
					            .build();
					 
					 return repository.findAll(specification, ipage.of());
				 }
			}
		
        return null;		
	}

	
}
